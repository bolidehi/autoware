name: combine-multi-arch-images
description: ""

inputs:
  package-name:
    description: ""
    required: true

runs:
  using: composite
  steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}

    - name: Set image name
      id: set-image-name
      run: echo "image-name=ghcr.io/${{ github.repository_owner }}/${{ inputs.package-name }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Get all tags
      id: get-all-tags
      run: |
        base_url="https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${{ inputs.package-name }}/versions"
        echo "base_url: $base_url"

        all_tags=()
        for page in $(seq 1 10); do
          page_url="${base_url}?page=$page"
          echo -e "\npage_url: $page_url"

          page_tags=$(curl -fsSL "$page_url" -H "Authorization: token ${{ github.token }}" | jq ".[].metadata.container.tags[]" | cut -d '"' -f 2)
          echo -e "\n[page_tags]\n$page_tags"

          if [ "$page_tags" = "" ]; then
            echo "No tags found in the page $page."
            break
          fi

          for tag in $(IFS=$'\n'; echo "$page_tags"); do
            all_tags+=("$tag")
          done
        done

        all_tags=$(printf "%s\n" ${all_tags[@]})
        echo -e "\n[all_tags]\n$all_tags"

        echo "tags=$(printf "%s " $all_tags | sed 's/\s*$//')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Get base tags
      id: get-base-tags
      run: |
        echo "All tags: ${{ steps.get-all-tags.outputs.tags }}"
        amd64_tags=()
        arm64_tags=()
        for tag in ${{ steps.get-all-tags.outputs.tags }}; do
          echo "Processing tag: $tag"
          if [[ $tag == *-amd64 ]]; then
            amd64_tags+=("${tag%-amd64}")
            echo "Added to amd64_tags: ${tag%-amd64}"
          elif [[ $tag == *-arm64 ]]; then
            arm64_tags+=("${tag%-arm64}")
            echo "Added to arm64_tags: ${tag%-arm64}"
          else
            echo "Tag doesn't match expected pattern: $tag"
          fi
        done
        base_tags=($(printf "%s\n" "${amd64_tags[@]}" "${arm64_tags[@]}" | sort -u))

        echo -e "\n[amd64_tags]\n${amd64_tags[*]}"
        echo -e "\n[arm64_tags]\n${arm64_tags[*]}"
        echo -e "\n[base_tags]\n${base_tags[*]}"

        echo "tags=${base_tags[*]}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create Docker manifests
      id: create-manifests
      run: |
        IFS=' ' read -ra BASE_TAGS <<< "${{ steps.get-base-tags.outputs.tags }}"
        echo "Base tags: ${BASE_TAGS[*]}"
        tags_to_remove=""
        for base_tag in "${BASE_TAGS[@]}"; do
          echo -e "\nProcessing base_tag: $base_tag"

          amd64_tag=$(echo "${{ steps.get-all-tags.outputs.tags }}" | tr ' ' '\n' | grep "^${base_tag}-amd64$" || true)
          arm64_tag=$(echo "${{ steps.get-all-tags.outputs.tags }}" | tr ' ' '\n' | grep "^${base_tag}-arm64$" || true)

          echo "amd64_tag: $amd64_tag"
          echo "arm64_tag: $arm64_tag"

          if [ -n "$amd64_tag" ] && [ -n "$arm64_tag" ]; then
            echo "Both amd64 and arm64 tags found for '$base_tag'. Creating manifest."
            manifest_args=(
              "${{ steps.set-image-name.outputs.image-name }}:$amd64_tag"
              "${{ steps.set-image-name.outputs.image-name }}:$arm64_tag"
            )

            echo "Creating manifest for $base_tag with 2 architectures"
            echo "Manifest command: docker manifest create ${{ steps.set-image-name.outputs.image-name }}:$base_tag ${manifest_args[*]}"
            if docker manifest create "${{ steps.set-image-name.outputs.image-name }}:$base_tag" "${manifest_args[@]}"; then
              echo "Pushing manifest: docker manifest push ${{ steps.set-image-name.outputs.image-name }}:$base_tag"
              if docker manifest push "${{ steps.set-image-name.outputs.image-name }}:$base_tag"; then
                echo "Successfully pushed manifest for $base_tag"

                # Verify the manifest
                echo "Verifying manifest:"
                docker manifest inspect "${{ steps.set-image-name.outputs.image-name }}:$base_tag"

                # Check if both architectures are present in the manifest
                if docker manifest inspect "${{ steps.set-image-name.outputs.image-name }}:$base_tag" | grep -q "arm64" && \
                   docker manifest inspect "${{ steps.set-image-name.outputs.image-name }}:$base_tag" | grep -q "amd64"; then
                  echo "Manifest verification successful. Adding tags to removal list."
                  tags_to_remove+="$amd64_tag $arm64_tag "
                else
                  echo "Manifest verification failed. Skipping tag removal to prevent data loss."
                fi
              else
                echo "Failed to push manifest for $base_tag"
                docker manifest inspect "${{ steps.set-image-name.outputs.image-name }}:$base_tag"
              fi
            else
              echo "Failed to create manifest for $base_tag"
              echo "Docker info:"
              docker info
              echo "Docker version:"
              docker version
            fi
          else
            echo "Both amd64 and arm64 tags not found for '$base_tag'. Skipping manifest creation."
          fi
        done

        tags_to_remove=${tags_to_remove% }
        echo "tags-to-remove=$tags_to_remove" >> $GITHUB_OUTPUT
      shell: bash

    - name: Remove old images
      uses: snok/container-retention-policy@v3.0.0
      with:
        account: autowarefoundation
        token: ${{ github.token }}
        image-names: autoware
        image-tags: ${{ steps.create-manifests.outputs.tags-to-remove }}
        cut-off: 1h
        dry-run: false
        tag-selection: tagged
